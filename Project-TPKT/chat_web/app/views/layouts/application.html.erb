<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Chat Web" %></title>
    <script src="/cable"></script>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app %>
  </head>

  <body class="light">
    <%= yield %>
  </body>
  <script type="module">
    import 'https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js';

    const button = document.getElementById('emoji-button');
    const panel = document.getElementById('emoji-panel');
    const picker = document.getElementById('picker');
    const input = document.getElementById('message-input'); // твое поле ввода

    button.addEventListener('click', () => {
      panel.classList.toggle('hidden');
    });

    picker.addEventListener('emoji-click', event => {
      input.value += event.detail.unicode;
      input.focus();
      panel.classList.add('hidden');
    });

    document.addEventListener("DOMContentLoaded", () => {
      const emojiButton = document.getElementById("emoji-button");
      const emojiPanel = document.getElementById("emoji-panel");
      const emojiPicker = document.getElementById("picker");
      const input = document.getElementById("long-input");
  
      // Вставка эмодзи в поле ввода
      emojiPicker.addEventListener("emoji-click", event => {
        const emoji = event.detail.unicode;
        const start = input.selectionStart;
        const end = input.selectionEnd;
        const before = input.value.substring(0, start);
        const after = input.value.substring(end);
        input.value = before + emoji + after;
        input.focus();
        input.selectionStart = input.selectionEnd = start + emoji.length;
      });
    });

    (function() {
      const cable = ActionCable.createConsumer();
  
      cable.subscriptions.create("ChatChannel", {
        received(data) {
          document.getElementById("messages").insertAdjacentHTML("beforeend", data);
        }
      });
    })();

    const toggleButton = document.getElementById("theme-toggle");

    // Функция смены темы
    function setTheme(theme) {
      document.body.classList.remove("light", "dark");
      document.body.classList.add(theme);
      localStorage.setItem("theme", theme);
    }

    // При клике меняем тему
    toggleButton.addEventListener("click", () => {
      const currentTheme = document.body.classList.contains("light") ? "light" : "dark";
      const newTheme = currentTheme === "light" ? "dark" : "light";
      setTheme(newTheme);
    });

    // При загрузке страницы читаем тему из localStorage
    window.addEventListener("DOMContentLoaded", () => {
      const savedTheme = localStorage.getItem("theme") || "light";
      setTheme(savedTheme);
    });

    window.onload = () => {
      const msgBox = document.querySelector('.messages');
      if (msgBox) msgBox.scrollTop = msgBox.scrollHeight;
    };


  </script>
</html>
