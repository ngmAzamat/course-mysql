require 'socket' # –∑–Ω–∞–µ—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TCP –Ω–∞–¥–æ socket(—ç—Ç–æ —Ç—Ä—É–±–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º)
require 'sqlite3' # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

DB = SQLite3::Database.new("chat.db")
DB.results_as_hash = true

clients = [] # –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ - –∞ –º–Ω–æ–≥–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤

def read_exact(socket, n)
  buf = +""
  while buf.bytesize < n
    chunk = socket.read(n - buf.bytesize)
    return nil if chunk.nil? # EOF or connection closed
    buf << chunk
  end
  buf
end

def read_tpkt(socket)
  header = read_exact(socket, 4) # —á—Ç–æ —ç—Ç–æ
  return nil unless header && header.bytesize == 4 # —á—Ç–æ —ç—Ç–æ

  version, _, hi, lo = header.unpack("C4") # –≤ –∫–ª–∏–µ–Ω—Ç–µ –º—ã —Å–æ–µ–¥–∏–Ω—è–ª–∏ –∞ —Ç—É—Ç –º—ã —Ä–æ–∑–æ–π–¥–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  length = (hi << 8) + lo # —á—Ç–æ —ç—Ç–æ

  payload = read_exact(socket, length - 4)
  return nil unless payload && payload.bytesize == (length - 4)

  payload.force_encoding('UTF-8') # –µ—Å–ª–∏ –∫—Ä–∞–∫–æ–∑—è–±—Ä–∞ —Ç–æ —ç—Ç–æ UTF-8
  unless payload.valid_encoding? # –µ—Å–ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π 
    payload = payload.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?') # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTF-8 –µ—Å–ª–∏ –µ—â–µ –Ω–µ UTF-8
  end

  payload
rescue EOFError, Errno::ECONNRESET, Errno::EPIPE
  nil
end

def send_tpkt(socket, data)
  data = data.encode('UTF-8') # –≤—Å–µ –≤ UTF-8
  length = data.bytesize + 4 # –¥–ª–∏–Ω–Ω–∞ = –¥–ª–∏–Ω–Ω–∞ –¥–∞–Ω–Ω—ã—Ö + 4(–∑–∞–≥–∞–ª–æ–≤–æ–∫)
  header = [3, 0, length >> 8, length & 0xFF].pack("C4") # –Ω–∞—à header = –í–µ—Ä—Å–∏—è(3), –ó–∞–ø–∞—Å(0), –î–ª–∏–Ω–Ω–∞(length >> 8, length & 0xFF) –∏ –≤—Å–µ –≤–º–µ—Å—Ç–µ(.pack("C4"))
  socket.write(header + data) # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≥–∞–ª–æ–≤–∫–∞ —Å —Ç–µ–ª–æ–º
rescue
  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
end

server = TCPServer.new('0.0.0.0', 4000) # –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä—É–±—É –∏ –ø–æ—Ç–æ–∫ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
puts "–°–µ—Ä–≤–µ—Ä TPKT –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000" # –∏ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ

loop do
  client = server.accept # –∂–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  clients << client # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  puts "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (–≤—Å–µ–≥–æ: #{clients.size})" # –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  Thread.new(client) do |sock|
    begin
      port = client.peeraddr[1] # –ø–æ—Ä—Ç - —ç—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ
      nickname = "–ì–æ—Å—Ç—å#{port}" # –±–∞–∑–∞–≤–æ - nickname —ç—Ç –ì–æ—Å—Ç—å –∏ –ø–æ—Ä—Ç
      send_tpkt(sock, "–ü—Ä–∏–≤–µ—Ç, —Ç—ã #{nickname}") # –æ–±—Ä–∞—â—è–µ–º—Å—è –∫ —é—Å–µ—Ä—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é sned_tpkt

      loop do # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        msg = read_tpkt(sock)

        break if msg.nil? || msg.strip.downcase == "exit" # –º—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –ª–∏–±–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ(–Ω–∞—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è) –∏–ª–∏ exit

        msg = msg.force_encoding('UTF-8') if msg # –µ—Å–ª–∏ –∫—Ä–∞–∫–æ–∑—è–±—Ä–∞ —Ç–æ —ç—Ç–æ UTF-8
        unless msg.valid_encoding? # –µ—Å–ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π 
          msg = msg.encode('UTF-8', 'binary', invalid: :replace, undef: :replace, replace: '?') # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTF-8 –µ—Å–ª–∏ –µ—â–µ –Ω–µ UTF-8
        end
        # —Ç—É—Ç –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –º—ã –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–¥–Ω–∞–∫–æ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã
        if msg.strip == "/history" # üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /history (–ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º —É–¥–∞–ª–µ–Ω—ã strip).
          rows = DB.execute("SELECT nickname, content, created_at FROM messages ORDER BY id DESC LIMIT 10") #üîπ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ: SELECT nickname, content, created_at ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, FROM messages ‚Äî –∏–∑ —Ç–∞–±–ª–∏—Ü—ã messages, ORDER BY id DESC ‚Äî –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é id, —Ç.–µ. —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ, LIMIT 10 ‚Äî –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
          rows.reverse.each do |row| # üîπ –ú—ã –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ rows.reverse, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è —à–ª–∏ —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ ‚Üí –ø–æ—Ç–æ–º –Ω–æ–≤—ã–µ, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ. –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –Ω–∏–º.
            send_tpkt(sock, "[#{row['created_at']}] #{row['nickname']}: #{row['content']}") # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ [–≤—Ä–µ–º—è] –ù–∏–∫: –°–æ–æ–±—â–µ–Ω–∏–µ
          end
          next
        end

        if msg.strip.start_with?("/nick ") # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /nick
          new_nick = msg.strip[6..].strip
          if new_nick.empty? # –∞ –µ—Å–ª–∏ –ø–æ—Å–ª–µ /nick –ø—É—Ç–æ
            send_tpkt(sock, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.") # —Ç–æ —Ç–∞–∫ –Ω–µ–ª—å–∑—è!
          else # –∞ –µ—Å–ª–∏ —á—Ç–æ –µ—Å—Ç—å
            old_nick = nickname # –Ω–∏–∫ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ä—ã–π –Ω–∏–∫
            nickname = new_nick # –∞ –Ω–æ–≤—ã–π –Ω–∏–∫ —ç—Ç–æ –Ω–∏–∫
            send_tpkt(sock, "–¢—ã —Ç–µ–ø–µ—Ä—å: #{nickname}") # –∏ –≥–æ–≤–æ—Ä–∏–º –Ω–æ–≤—ã–π –Ω–∏–∫
            clients.each do |cl| # –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
              next if cl == sock
              send_tpkt(cl, "#{old_nick} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ #{nickname}") # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
            end
          end
          next
        end

        puts "#{nickname}: #{msg}" # –µ—Å–ª–∏ –∫—Ç–æ —Ç–æ –ø–∏—à–µ—Ç —Ç–æ –º—ã —ç—Ç–æ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Å–µ—Ä–≤–µ—Ä–∞
        DB.execute("INSERT INTO messages (nickname, content) VALUES (?, ?)", [nickname, msg])

        clients.each do |cl| # –∏ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
          next if cl == sock
          send_tpkt(cl, "#{nickname}: #{msg}") # —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        end
      end
    ensure
      puts "#{nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è" # –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
      clients.delete(sock) # —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      sock.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º
    end
  end
end
